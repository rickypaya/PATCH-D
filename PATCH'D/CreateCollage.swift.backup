import SwiftUI

// MARK: - Small, reusable atoms

struct CheckeredBorder: View {
    let a: Color
    let b: Color
    let count: Int
    let height: CGFloat

    var body: some View {
        VStack(spacing: 0) {
            HStack(spacing: 0) {
                ForEach(0..<count, id: \.self) { i in
                    Rectangle()
                        .fill(i.isMultiple(of: 2) ? a : b)
                        .frame(height: height)
                }
            }
            HStack(spacing: 0) {
                ForEach(0..<count, id: \.self) { i in
                    Rectangle()
                        .fill(i.isMultiple(of: 2) ? b : a)
                        .frame(height: height)
                }
            }
        }
    }
}

struct FieldContainer<Content: View>: View {
    let background: Color
    let border: Color
    let inner: Content

    init(background: Color, border: Color, @ViewBuilder content: () -> Content) {
        self.background = background
        self.border = border
        self.inner = content()
    }

    var body: some View {
        ZStack {
            RoundedRectangle(cornerRadius: 8)
                .fill(background)
            RoundedRectangle(cornerRadius: 8)
                .stroke(border, style: StrokeStyle(lineWidth: 2, dash: [4,4]))
        }
        .overlay(
            inner
                .padding(.horizontal, 16)
                .padding(.vertical, 11.5)
        )
    }
}

struct DurationStepper: View {
    let labelColor: Color
    let boxBg: Color
    let boxText: Color
    let width: CGFloat
    @Binding var duration: TimeInterval
    let orderedValues: [TimeInterval]
    let formatter: (TimeInterval) -> String

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Duration (expires in:)")
                .font(.custom("Sanchez", size: 18)).fontWeight(.bold)
                .foregroundColor(labelColor)

            HStack {
                Text(formatter(duration))
                    .font(.custom("Sanchez", size: 16)).fontWeight(.medium)
                    .foregroundColor(boxText)

                Spacer()

                VStack(spacing: 2) {
                    Button { increment() } label: {
                        Image(systemName: "chevron.up")
                            .foregroundColor(boxText)
                            .font(.system(size: 12, weight: .bold))
                    }
                    Button { decrement() } label: {
                        Image(systemName: "chevron.down")
                            .foregroundColor(boxText)
                            .font(.system(size: 12, weight: .bold))
                    }
                }
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 11.5)
            .background(boxBg)
            .cornerRadius(12)
            .frame(maxWidth: width)
        }
    }

    private func increment() {
        guard let idx = orderedValues.firstIndex(of: duration) else { return }
        if idx + 1 < orderedValues.count { duration = orderedValues[idx + 1] }
    }
    private func decrement() {
        guard let idx = orderedValues.firstIndex(of: duration) else { return }
        if idx - 1 >= 0 { duration = orderedValues[idx - 1] }
    }
}

struct ThemeDropdown: View {
    let themes: [String]
    @Binding var isPresented: Bool
    @Binding var selectionIndex: Int?
    @Binding var text: String

    var body: some View {
        ZStack {
            Color.black.opacity(0.3)
                .ignoresSafeArea()
                .onTapGesture { withAnimation(.easeInOut(duration: 0.2)) { isPresented = false } }

            VStack(spacing: 0) {
                HStack {
                    Text("Choose a Theme")
                        .font(.custom("Sanchez", size: 18)).fontWeight(.bold)
                        .foregroundColor(.black)
                    Spacer()
                    Button {
                        withAnimation(.easeInOut(duration: 0.2)) { isPresented = false }
                    } label: {
                        Image(systemName: "xmark")
                            .foregroundColor(.gray)
                            .font(.system(size: 16, weight: .medium))
                    }
                }
                .padding(.horizontal, 20)
                .padding(.vertical, 16)
                .background(Color(.systemGray6))

                ScrollView {
                    VStack(spacing: 0) {
                        ForEach(themes.indices, id: \.self) { i in
                            Button {
                                text = themes[i]
                                selectionIndex = i
                                withAnimation(.easeInOut(duration: 0.2)) { isPresented = false }
                            } label: {
                                HStack {
                                    Text(themes[i])
                                        .font(.custom("Sanchez", size: 16))
                                        .foregroundColor(.black)
                                    Spacer()
                                    if selectionIndex == i {
                                        Image(systemName: "checkmark")
                                            .foregroundColor(.blue)
                                            .font(.system(size: 14, weight: .bold))
                                    }
                                }
                                .padding(.horizontal, 20)
                                .padding(.vertical, 16)
                                .background(Color.white)
                            }
                            .buttonStyle(.plain)
                        }
                    }
                }
                .frame(maxHeight: 300)
                .background(Color.white)
            }
            .background(Color.white)
            .cornerRadius(16)
            .shadow(color: .black.opacity(0.15), radius: 20, x: 0, y: 10)
            .padding(.horizontal, 20)
        }
        .transition(.opacity)
        .zIndex(1)
    }
}

// MARK: - Create Collage View (regular)

struct CreateCollageView: View {
    @EnvironmentObject var appState: AppState
    @Environment(\.dismiss) var dismiss

    @State private var isCreating = false
    @State private var themeInput = ""
    @State private var selectedDuration: TimeInterval = 86400 // 1 day
    @State private var errorMessage: String?
    @State private var showValidationError = false
    @State private var isPartyMode = false
    @State private var showThemeDropdown = false
    @State private var selectedThemeIndex: Int? = nil

    // Options
    private let dayDurations: [TimeInterval] = [86400, 172800, 259200, 345600, 432000]
    private let predefinedThemes = [
        "Sunset Vibes üåÖ","Coffee Shop Moments ‚òï","Fit Check üëü","Food Tour üçï",
        "Night Out üåÉ","Beach Day üèñÔ∏è","Concert & Festival üéµ","Pet Time üêæ",
        "Travel Adventures ‚úàÔ∏è","Gym & Wellness üí™","Brunch Squad ü•û","Road Trip üöó",
        "Nature Escape üåø","Thrift Finds üõçÔ∏è","Game Night üéÆ"
    ]

    // Colors
    private var backgroundColor: Color { isPartyMode ? Color(hex: "DF94A8") : Color(hex: "A8C2AE") }
    private var cardBackgroundColor: Color { isPartyMode ? Color(hex: "120400") : Color(hex: "FFFAF1") }
    private var textColor: Color { isPartyMode ? Color(hex: "F1C1B0") : Color(hex: "38603E") }
    private var accentColor: Color { isPartyMode ? Color(hex: "DF94A8") : Color(hex: "38603E") }
    private var borderColor: Color { Color(hex: "CCDFD1") }
    private var boxBackgroundColor: Color { isPartyMode ? Color(hex: "F1C1B0") : Color(hex: "CCDFD1") }
    private var fieldBorderColor: Color { Color(hex: "CCDFD1") }
    private var fieldBackgroundColor: Color { Color.white }
    private var fieldTextColor: Color { isPartyMode ? Color(hex: "F1C1B0") : Color(hex: "A8C2AE") }
    private var dottedDetailColor: Color { Color(hex: "EAFAEE") }
    private var buttonDottedDetailColor: Color { isPartyMode ? Color(hex: "CA5574") : Color(hex: "113917") }

    private var isFormValid: Bool {
        !themeInput.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
    }

    // MARK: UI parts
    private var backArrow: some View {
        Button {
            withAnimation(.easeInOut(duration: 0.3)) {
                appState.currentState = .homeScreen
            }
        } label: {
            Image(systemName: "arrow.left")
                .foregroundColor(textColor)
                .font(.system(size: 24, weight: .medium))
        }
    }

    private var partyModeBanner: some View {
        VStack(alignment: .center, spacing: 16) {
            HStack(spacing: 12) {
                Button(action: {
                    withAnimation(.easeInOut(duration: 0.3)) { 
                        let wasPartyMode = isPartyMode
                        isPartyMode.toggle()
                        // Update duration when switching modes
                        if isPartyMode && !wasPartyMode {
                            // Switching TO Party Mode
                            selectedDuration = 1800 // 30 min
                        } else if !isPartyMode && wasPartyMode {
                            // Switching FROM Party Mode
                            selectedDuration = 86400 // 1 day
                        }
                    }
                }) {
                    Rectangle()
                        .fill(isPartyMode ? Color(hex: "CA5230") : Color.white)
                        .frame(width: 20, height: 20)
                        .overlay(Image(systemName: isPartyMode ? "checkmark" : "")
                                    .foregroundColor(isPartyMode ? Color(hex: "FFF7F4") : Color(hex: "38603E"))
                                    .font(.system(size: 12, weight: .bold)))
                }
                Text("Party Mode Collage")
                    .font(.custom("Sanchez", size: 16)).fontWeight(.bold)
                    .foregroundColor(isPartyMode ? Color(hex: "BE532F") : Color(hex: "38603E"))
                Spacer()
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 11.5)
            .background(isPartyMode ? Color(hex: "F1C1B0") : Color(hex: "CCDFD1"))
            .cornerRadius(8)
            .frame(maxWidth: 280)

            VStack(spacing: 4) {
                Text(isPartyMode ? "Random theme assigned" : "Choose your own theme")
                Text(isPartyMode ? "Photos blurred until final collage reveal" : "All images visible to everyone")
                Text(isPartyMode ? "Shorter durations" : "Longer durations")
            }
            .font(.custom("Sanchez", size: 12))
            .foregroundColor(isPartyMode ? Color(hex: "F1C1B0") : Color(hex: "79A27F"))
        }
    }

    var body: some View {
        ZStack {
            backgroundColor.ignoresSafeArea()

            VStack(spacing: 0) {
                Spacer().frame(height: 20)

                VStack(spacing: 0) {
                    Spacer().frame(height: 10)

                    VStack(spacing: 0) {
                        CheckeredBorder(a: backgroundColor, b: cardBackgroundColor, count: 15, height: 12)

                        VStack(spacing: 24) {
                            Image(isPartyMode ? "party_icon" : "photo_stack_icon")
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .frame(width: 109, height: 82)
                                .foregroundColor(textColor)

                            Text("Create Collage")
                                .font(.custom("Sanchez", size: 28)).fontWeight(.bold)
                                .foregroundColor(isPartyMode ? Color(hex: "DF94A8") : textColor)

                            partyModeBanner

                            // Theme field
                            VStack(alignment: .leading, spacing: 8) {
                                Text("Theme/Title")
                                    .font(.custom("Sanchez", size: 18)).fontWeight(.bold)
                                    .foregroundColor(isPartyMode ? Color(hex: "E8CDB2") : textColor)

                                if isPartyMode {
                                    // Party Mode: Show MYSTERY field
                                    Text("MYSTERY")
                                        .font(.custom("Sanchez", size: 16)).fontWeight(.bold)
                                        .foregroundColor(Color(hex: "E5727E"))
                                        .padding(.horizontal, 16)
                                        .padding(.vertical, 11.5)
                                        .background(Color.white)
                                        .cornerRadius(8)
                                        .frame(maxWidth: 270)
                                } else {
                                    // Normal Mode: Show text input field
                                    HStack(spacing: 6) {
                                        FieldContainer(background: fieldBackgroundColor, border: fieldBorderColor) {
                                            ZStack(alignment: .leading) {
                                                if themeInput.isEmpty {
                                                    Text("Name your collage or pick one")
                                                        .font(.custom("Sanchez", size: 16))
                                                        .foregroundColor(Color(hex: "A8C2AE"))
                                                        .tracking(-0.5)
                                                }
                                                TextField("", text: $themeInput)
                                                    .font(.custom("Sanchez", size: 16))
                                                    .foregroundColor(Color(hex: "A8C2AE"))
                                                    .tracking(-0.5)
                                                    .onTapGesture { if selectedThemeIndex != nil { selectedThemeIndex = nil } }
                                            }
                                        }
                                        .overlay(
                                            RoundedRectangle(cornerRadius: 8)
                                                .stroke(dottedDetailColor, style: StrokeStyle(lineWidth: 2, dash: [4,4]))
                                                .padding(6)
                                        )
                                        .frame(maxWidth: 252)

                                        Button {
                                            withAnimation(.easeInOut(duration: 0.2)) { showThemeDropdown.toggle() }
                                        } label: {
                                            Image(systemName: showThemeDropdown ? "chevron.up" : "chevron.down")
                                                .foregroundColor(textColor)
                                                .font(.system(size: 14, weight: .medium))
                                                .frame(width: 30, height: 30)
                                                .background(fieldBackgroundColor)
                                                .overlay(Circle().stroke(fieldBorderColor, style: StrokeStyle(lineWidth: 2, dash: [4,4])))
                                                .clipShape(Circle())
                                        }
                                    }
                                }
                            }

                            Spacer().frame(height: -10)

                            // Duration
                            DurationStepper(
                                labelColor: isPartyMode ? Color(hex: "E8CDB2") : textColor,
                                boxBg: isPartyMode ? Color(hex: "CD5D5F") : boxBackgroundColor,
                                boxText: isPartyMode ? Color(hex: "F1C1B0") : textColor,
                                width: 200,
                                duration: $selectedDuration,
                                orderedValues: isPartyMode ? [1800, 3600, 7200, 10800, 14400, 18000] : dayDurations,
                                formatter: { d in
                                    if isPartyMode {
                                        switch d {
                                        case 1800: return "30 min"
                                        case 3600: return "1 hour"
                                        case 7200: return "2 hours"
                                        case 10800: return "3 hours"
                                        case 14400: return "4 hours"
                                        case 18000: return "5 hours"
                                        default: return "30 min"
                                        }
                                    } else {
                                        switch d {
                                        case 86400: return "1 Day"
                                        case 172800: return "2 Days"
                                        case 259200: return "3 Days"
                                        case 345600: return "4 Days"
                                        case 432000: return "5 Days"
                                        default: return "1 Day"
                                        }
                                    }
                                }
                            )

                            Spacer().frame(height: 5)

                            if showValidationError && !isFormValid {
                                Text("Pick a theme to start a collage!")
                                    .font(.custom("Sanchez", size: 14))
                                    .foregroundColor(.red)
                                    .multilineTextAlignment(.center)
                            }

                            Button(action: isPartyMode ? handleStartParty : handleStartCollaging) {
                                Text("Create Collage")
                                    .font(.custom("Sanchez", size: 18)).fontWeight(.bold)
                                    .foregroundColor(Color(hex: "FFFFFF"))
                                    .frame(maxWidth: .infinity, minHeight: 56)
                                    .background(isPartyMode ? Color(hex: "E5727E") : accentColor)
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 12)
                                            .stroke(isPartyMode ? Color(hex: "BB515C") : buttonDottedDetailColor, style: StrokeStyle(lineWidth: 2, dash: [4,4]))
                                            .padding(2)
                                    )
                                    .cornerRadius(12)
                            }
                            .disabled(isCreating)
                        }
                        .padding(.horizontal, 24)
                        .padding(.vertical, 32)
                        .background(cardBackgroundColor)

                        CheckeredBorder(a: backgroundColor, b: cardBackgroundColor, count: 15, height: 12)
                    }
                    .cornerRadius(20)
                    .shadow(color: Color.black.opacity(0.25), radius: 4, x: 0, y: 4)
                    .padding(.horizontal, 16)

                    Spacer().frame(height: 10)
                }

                Spacer().frame(height: 33)
            }

            VStack {
                HStack {
                    backArrow
                        .padding(.leading, 20)
                        .padding(.top, 10)
                    Spacer()
                }
                Spacer()
            }

            if showThemeDropdown {
                ThemeDropdown(
                    themes: predefinedThemes,
                    isPresented: $showThemeDropdown,
                    selectionIndex: $selectedThemeIndex,
                    text: $themeInput
                )
            }
        }
    }
    
    private var normalCreateCollageView: some View {
        ZStack {
            backgroundColor.ignoresSafeArea()

            VStack(spacing: 0) {
                Spacer().frame(height: 20)

                VStack(spacing: 0) {
                    Spacer().frame(height: 10)

                    VStack(spacing: 0) {
                        CheckeredBorder(a: backgroundColor, b: cardBackgroundColor, count: 15, height: 12)

                        VStack(spacing: 24) {
                            Image("photo_stack_icon")
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .frame(width: 109, height: 82)
                                .foregroundColor(textColor)

                            Text("Create Collage")
                                .font(.custom("Sanchez", size: 28)).fontWeight(.bold)
                                .foregroundColor(textColor)

                            partyModeBanner

                            // Theme field
                            VStack(alignment: .leading, spacing: 8) {
                                Text("Theme/Title")
                                    .font(.custom("Sanchez", size: 18)).fontWeight(.bold)
                                    .foregroundColor(textColor)

                                HStack(spacing: 6) {
                                    FieldContainer(background: fieldBackgroundColor, border: fieldBorderColor) {
                                        ZStack(alignment: .leading) {
                                            if themeInput.isEmpty && !isPartyMode {
                                                Text("Name your collage or pick one")
                                                    .font(.custom("Sanchez", size: 16))
                                                    .foregroundColor(Color(hex: "A8C2AE"))
                                                    .tracking(-0.5)
                                            }
                                            if isPartyMode {
                                                Text("MYSTERY")
                                                    .font(.custom("Sanchez", size: 16))
                                                    .foregroundColor(Color(hex: "E5727E"))
                                                    .tracking(-0.5)
                                            }
                                            TextField("", text: $themeInput)
                                                .font(.custom("Sanchez", size: 16))
                                                .foregroundColor(Color(hex: "A8C2AE"))
                                                .tracking(-0.5)
                                                .disabled(isPartyMode)
                                                .onTapGesture { if selectedThemeIndex != nil { selectedThemeIndex = nil } }
                                        }
                                    }
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 8)
                                            .stroke(dottedDetailColor, style: StrokeStyle(lineWidth: 2, dash: [4,4]))
                                            .padding(6)
                                    )
                                    .frame(maxWidth: 252)

                                    Button {
                                        withAnimation(.easeInOut(duration: 0.2)) { showThemeDropdown.toggle() }
                                    } label: {
                                        Image(systemName: showThemeDropdown ? "chevron.up" : "chevron.down")
                                            .foregroundColor(textColor)
                                            .font(.system(size: 14, weight: .medium))
                                            .frame(width: 30, height: 30)
                                            .background(fieldBackgroundColor)
                                            .overlay(Circle().stroke(fieldBorderColor, style: StrokeStyle(lineWidth: 2, dash: [4,4])))
                                            .clipShape(Circle())
                                    }
                                }
                            }

                            Spacer().frame(height: -10)

                            // Duration
                            DurationStepper(
                                labelColor: isPartyMode ? Color(hex: "E8CDB2") : textColor,
                                boxBg: boxBackgroundColor,
                                boxText: isPartyMode ? Color(hex: "F1C1B0") : textColor,
                                width: 200,
                                duration: $selectedDuration,
                                orderedValues: isPartyMode ? [1800, 3600, 7200, 10800, 14400, 18000] : dayDurations,
                                formatter: { d in
                                    if isPartyMode {
                                        switch d {
                                        case 1800: return "30 min"
                                        case 3600: return "1 hour"
                                        case 7200: return "2 hours"
                                        case 10800: return "3 hours"
                                        case 14400: return "4 hours"
                                        case 18000: return "5 hours"
                                        default: return "30 min"
                                        }
                                    } else {
                                        switch d {
                                        case 86400: return "1 Day"
                                        case 172800: return "2 Days"
                                        case 259200: return "3 Days"
                                        case 345600: return "4 Days"
                                        case 432000: return "5 Days"
                                        default: return "1 Day"
                                        }
                                    }
                                }
                            )

                            Spacer().frame(height: 5)

                            if showValidationError && !isFormValid {
                                Text("Pick a theme to start a collage!")
                                    .font(.custom("Sanchez", size: 14))
                                    .foregroundColor(.red)
                                    .multilineTextAlignment(.center)
                            }

                            Button(action: handleStartCollaging) {
                                Text("Create Collage")
                                    .font(.custom("Sanchez", size: 18)).fontWeight(.bold)
                                    .foregroundColor(.white)
                                    .frame(maxWidth: .infinity, minHeight: 56)
                                    .background(accentColor)
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 12)
                                            .stroke(buttonDottedDetailColor, style: StrokeStyle(lineWidth: 2, dash: [4,4]))
                                            .padding(2)
                                    )
                                    .cornerRadius(12)
                            }
                            .disabled(isCreating)
                        }
                        .padding(.horizontal, 24)
                        .padding(.vertical, 32)
                        .background(cardBackgroundColor)

                        CheckeredBorder(a: backgroundColor, b: cardBackgroundColor, count: 15, height: 12)
                    }
                    .cornerRadius(20)
                    .shadow(color: Color.black.opacity(0.25), radius: 4, x: 0, y: 4)
                    .padding(.horizontal, 16)

                    Spacer().frame(height: 10)
                }

                Spacer().frame(height: 33)
            }

            VStack {
                HStack {
                    backArrow
                        .padding(.leading, 20)
                        .padding(.top, 10)
                    Spacer()
                }
                Spacer()
            }

            if showThemeDropdown {
                ThemeDropdown(
                    themes: predefinedThemes,
                    isPresented: $showThemeDropdown,
                    selectionIndex: $selectedThemeIndex,
                    text: $themeInput
                )
            }
        }
    }

    private func handleStartCollaging() {
        showValidationError = true
        guard isFormValid else { return }

        isCreating = true
        errorMessage = nil

        Task {
            let theme = isPartyMode
            ? (predefinedThemes.randomElement() ?? "Party Time üéâ")
            : themeInput.trimmingCharacters(in: .whitespacesAndNewlines)

            await appState.createNewCollageSession(
                theme: theme,
                duration: selectedDuration,
                isPartyMode: isPartyMode
            )
            await appState.loadCollageSessions()
            
            // Select the newly created session and navigate to fullscreen
            if let newSession = appState.activeSessions.last {
                await appState.selectCollageSession(newSession)
                withAnimation(.easeInOut(duration: 0.3)) {
                    appState.navigateTo(.fullscreen)
                }
            }
            
            DispatchQueue.main.async { isCreating = false }
        }
    }
    
    private func handleStartParty() {
        isCreating = true
        errorMessage = nil

        Task {
            let randomTheme = predefinedThemes.randomElement() ?? "Party Time üéâ"
            await appState.createNewCollageSession(
                theme: randomTheme,
                duration: selectedDuration,
                isPartyMode: true
            )
            await appState.loadCollageSessions()
            
            // Select the newly created session and navigate to fullscreen
            if let newSession = appState.activeSessions.last {
                await appState.selectCollageSession(newSession)
                withAnimation(.easeInOut(duration: 0.3)) {
                    appState.navigateTo(.fullscreen)
                }
            }
            
            DispatchQueue.main.async { isCreating = false }
        }
    }
}

// MARK: - Party Mode Dedicated Screen (kept but simplified internals)

struct CreateCollage_PartyModeView: View {
    @EnvironmentObject var appState: AppState
    @Environment(\.dismiss) var dismiss

    @Binding var selectedDuration: TimeInterval
    @Binding var isCreating: Bool
    @Binding var errorMessage: String?

    private let partyDurations: [TimeInterval] = [1800, 3600, 7200, 10800, 14400, 18000]
    private let predefinedThemes = [
        "Sunset Vibes üåÖ","Coffee Shop Moments ‚òï","Fit Check üëü","Food Tour üçï",
        "Night Out üåÉ","Beach Day üèñÔ∏è","Concert & Festival üéµ","Pet Time üêæ",
        "Travel Adventures ‚úàÔ∏è","Gym & Wellness üí™","Brunch Squad ü•û","Road Trip üöó",
        "Nature Escape üåø","Thrift Finds üõçÔ∏è","Game Night üéÆ"
    ]

    // Colors
    private var partyBackground: Color { Color(hex: "DF94A8") }
    private var partyCardBg: Color { Color(hex: "120400") }
    private var partyText: Color { Color(hex: "F1C1B0") }
    private var partyBoxBg: Color { Color(hex: "F1C1B0") }
    private var partyBoxText: Color { Color(hex: "BE532F") }
    private var partyCheckbox: Color { Color(hex: "CA5230") }
    private var partyCheckmark: Color { Color(hex: "FFF7F4") }
    private var partyDurationText: Color { Color(hex: "E8CDB2") }
    private var partyDurationBoxBg: Color { Color(hex: "CD5D5F") }
    private var partyDurationBoxText: Color { Color(hex: "F1C1B0") }
    private var partyButtonBg: Color { Color(hex: "DF94A8") }
    private var partyButtonBorder: Color { Color(hex: "CA5574") }

    private var backArrow: some View {
        Button {
            withAnimation(.easeInOut(duration: 0.3)) {
                appState.currentState = .homeScreen
            }
        } label: {
            Image(systemName: "arrow.left")
                .foregroundColor(partyText)
                .font(.system(size: 24, weight: .medium))
        }
    }

    var body: some View {
        ZStack {
            partyBackground.ignoresSafeArea()

            VStack(spacing: 0) {
                Spacer().frame(height: 20)

                VStack(spacing: 0) {
                    Spacer().frame(height: 10)

                    VStack(spacing: 0) {
                        CheckeredBorder(a: partyBackground, b: .black, count: 15, height: 12)

                         VStack(spacing: 24) {
                             Image("party_icon")
                                 .resizable()
                                 .aspectRatio(contentMode: .fit)
                                 .frame(width: 109, height: 82)
                                 .foregroundColor(partyText)

                             Text("Create Collage")
                                 .font(.custom("Sanchez", size: 28)).fontWeight(.bold)
                                 .foregroundColor(Color(hex: "DF94A8"))

                             // Locked Party Mode banner
                             VStack(alignment: .center, spacing: 16) {
                                 HStack(spacing: 12) {
                                     Rectangle()
                                         .fill(partyCheckbox)
                                         .frame(width: 20, height: 20)
                                         .overlay(
                                             Image(systemName: "checkmark")
                                                 .foregroundColor(partyCheckmark)
                                                 .font(.system(size: 12, weight: .bold))
                                         )
                                     Text("Party Mode Collage")
                                         .font(.custom("Sanchez", size: 16)).fontWeight(.bold)
                                         .foregroundColor(partyBoxText)
                                     Spacer()
                                 }
                                 .padding(.horizontal, 16)
                                 .padding(.vertical, 11.5)
                                 .background(partyBoxBg)
                                 .cornerRadius(8)
                                 .frame(maxWidth: 275)

                                 VStack(spacing: 4) {
                                     Text("Random theme assigned")
                                     Text("Photos blurred until final collage reveal")
                                     Text("Shorter durations")
                                 }
                                 .font(.custom("Sanchez", size: 12))
                                 .foregroundColor(partyText)
                             }

                             // Theme display
                             VStack(alignment: .leading, spacing: 8) {
                                 Text("Theme/Title")
                                     .font(.custom("Sanchez", size: 18)).fontWeight(.bold)
                                     .foregroundColor(Color(hex: "E8CDB2"))
                                 Text("MYSTERY")
                                     .font(.custom("Sanchez", size: 16)).fontWeight(.bold)
                                     .foregroundColor(Color(hex: "E5727E"))
                                     .padding(.horizontal, 16)
                                     .padding(.vertical, 11.5)
                                     .background(Color.white)
                                     .cornerRadius(8)
                                     .frame(maxWidth: 270)
                             }

                            Spacer().frame(height: -10)

                            DurationStepper(
                                labelColor: Color(hex: "E8CDB2"),
                                boxBg: Color(hex: "CD5D5F"),
                                boxText: Color(hex: "F1C1B0"),
                                width: 200,
                                duration: $selectedDuration,
                                orderedValues: partyDurations,
                                formatter: { d in
                                    switch d {
                                    case 1800: return "30 min"
                                    case 3600: return "1 hour"
                                    case 7200: return "2 hours"
                                    case 10800: return "3 hours"
                                    case 14400: return "4 hours"
                                    case 18000: return "5 hours"
                                    default: return "30 min"
                                    }
                                }
                            )

                            Spacer().frame(height: 5)

                            Button(action: handleStartParty) {
                                Text("Create Collage")
                                    .font(.custom("Sanchez", size: 18)).fontWeight(.bold)
                                    .foregroundColor(Color(hex: "FFFFFF"))
                                    .frame(maxWidth: .infinity, minHeight: 56)
                                    .background(Color(hex: "E5727E"))
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 12)
                                            .stroke(Color(hex: "BB515C"), style: StrokeStyle(lineWidth: 2, dash: [4,4]))
                                            .padding(2)
                                    )
                                    .cornerRadius(12)
                            }
                             .disabled(isCreating)
                        }
                        .padding(.horizontal, 24)
                        .padding(.vertical, 32)
                        .background(partyCardBg)

                        CheckeredBorder(a: partyBackground, b: .black, count: 15, height: 12)
                    }
                    .cornerRadius(20)
                    .shadow(color: Color.black.opacity(0.25), radius: 4, x: 0, y: 4)
                    .padding(.horizontal, 16)

                    Spacer().frame(height: 10)
                }

                Spacer().frame(height: 33)
            }

            VStack {
                HStack {
                    backArrow
                        .padding(.leading, 20)
                        .padding(.top, 10)
                    Spacer()
                }
                Spacer()
            }
        }
        .onAppear {
            selectedDuration = partyDurations.first ?? 1800
        }
    }

    private func handleStartParty() {
        isCreating = true
        errorMessage = nil

        Task {
            let randomTheme = predefinedThemes.randomElement() ?? "Party Time üéâ"
            await appState.createNewCollageSession(
                theme: randomTheme,
                duration: selectedDuration,
                isPartyMode: true
            )
            await appState.loadCollageSessions()
            
            // Select the newly created session and navigate to fullscreen
            if let newSession = appState.activeSessions.last {
                await appState.selectCollageSession(newSession)
                withAnimation(.easeInOut(duration: 0.3)) {
                    appState.navigateTo(.fullscreen)
                }
            }
            
            DispatchQueue.main.async { isCreating = false }
        }
    }
}

// MARK: - Triangle

struct Triangle: Shape {
    func path(in rect: CGRect) -> Path {
        var p = Path()
        p.move(to: CGPoint(x: rect.midX, y: rect.minY))
        p.addLine(to: CGPoint(x: rect.minX, y: rect.maxY))
        p.addLine(to: CGPoint(x: rect.maxX, y: rect.maxY))
        p.closeSubpath()
        return p
    }
}

// MARK: - Color hex

extension Color {
    init(hex: String) {
        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
        var int: UInt64 = 0
        Scanner(string: hex).scanHexInt64(&int)
        let a, r, g, b: UInt64
        switch hex.count {
        case 3: (a,r,g,b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)
        case 6: (a,r,g,b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)
        case 8: (a,r,g,b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)
        default:(a,r,g,b) = (1,1,1,0)
        }
        self.init(.sRGB,
                  red: Double(r)/255,
                  green: Double(g)/255,
                  blue: Double(b)/255,
                  opacity: Double(a)/255)
    }
}

// MARK: - Lightweight previews

#Preview("Create Collage View") {
    CreateCollageView()
        .environmentObject(AppState.preview())
}

#Preview("Create Collage - Party Mode View") {
    CreateCollage_PartyModeView(
        selectedDuration: .constant(1800),
        isCreating: .constant(false),
        errorMessage: .constant(nil)
    )
        .environmentObject(AppState.preview())
}

